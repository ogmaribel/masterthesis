{
    "collab_server" : "",
    "contents" : "\nfl2<-read.csv('/Users/maribelojeda/MIT/I-WALKER/i-walker-Atia/nogales_data_curves/openfilesall2.csv', header = FALSE, sep = \",\" ) \n\nfl2 <- as.data.frame(fl2) #We transpose the dataframe of the csv document \n\nlink<-'/Users/maribelojeda/MIT/I-WALKER/i-walker-Atia/nogales_data_curves/right_2/right_all/'\n\nfor(all in 1:length(fl2$V1)){\n    link2<-fl2$V1[all]\n    link2<-as.character(link2)\n    link3<-paste(link, link2, sep = \"\")\n    link3<-toString(link3)\n    \n    fl<-read.csv(link3, header = FALSE, sep = \",\" ) \n    fl <- t(fl)\n    fl <- as.data.frame(fl) #We transpose the dataframe of the csv document \n    fl <- fl[-nrow(fl),] #We remove the last row\n    sl2<-substr(link2, 7, 16)\n    #Order of the variables:\n    #1.name of the file, 2.curvature indexes, 3. xposition in curvature index, 4. yposition in curvature index, \n    #5.left-hand force in x, 6.left-hand force in y, 7.left-hand force in z, 8.right-hand force in x, 9.right-hand force in y\n    # 10.right-hand force in z, 11.left normal force, 12. right normal force, 13.tilt, 14. roll, 15.hand brake left, 16.hand brake right\n    #17.estimated pose X, 18.estimated pose Y, 19.estimated pose orientation, 20.left speed, 21.right speed\n    \n    \n    #Identify outliers\n      #Pythagoras distances are calculated, then we get the quartiles of this data, then we get the upper and lower bounds and then the outliers\n    \n    ciiden<-length(fl$V2)\n    fi<-na.omit(fl$V2)\n    ciiden<-length(fi)\n    \n    if(ciiden>0){\n          #Pythagoras\n          distance <- function (lat2,lat1,lon2,lon1){   \n            c <- sqrt((lat2-lat1)^2+(lon2-lon1)^2)\n          }\n          \n          x<-fl$V3\n          y<-fl$V4\n          \n          sq=integer(length(x))\n          sq[1]<-0\n          for(i in 2:length(x)){\n            sq[i]<-distance(x[i], x[i-1], y[i], y[i-1])\n          }\n          \n          sq <- na.omit(sq)\n          \n          #Quartiles and bounds\n          s<-summary(sq)\n          q1<-s[2]\n          q3<-s[5]\n          iq<-q3-q1\n          ub<-q3+(1.5*iq)\n          lb<-q1-(1.5*iq)\n          \n          #Outliers\n          tof=logical(length(sq))\n          tof[1]<-FALSE\n          for(i in 2:length(sq)){\n            if(sq[i]<lb || sq[i]>ub)\n              tof[i]<-TRUE\n            else\n              tof[i]<-FALSE\n          }\n          \n          #Define the curvature range\n            #Divide in array the curvature indixes if outliers are identified, remove the ranges with a length below 10,\n            #join the arrays that were not removed\n          #Split\n          nt<-table(tof)[\"TRUE\"]\n          nmb<-1\n          vts<-na.omit(fl$V2)\n          spt<-vector(\"numeric\", length(sq))\n          for(i in 1:length(sq)){\n            spt[i]<-nmb\n              if(tof[i]==TRUE){\n                nmb<-nmb+1\n              }\n          }\n          \n          t<-split(vts, spt, drop = 1:20)\n          #Remove <10\n          spt2<-t[lengths(t) >= 29]\n          #5.left-hand force in x, 6.left-hand force in y, 7.left-hand force in z, 8.right-hand force in x, 9.right-hand force in y\n          # 10.right-hand force in z, 11.left normal force, 12. right normal force, 13.tilt, 14. roll, 15.hand brake left, 16.hand brake right\n          #17.estimated pose X, 18.estimated pose Y, 19.estimated pose orientation, 20.left speed, 21.right speed  \n          #Join\n          sllest<-as.numeric(lapply(spt2[1],min))\n          bgst<-as.numeric(lapply(spt2[length(spt2)],max))\n          range<-as.numeric((bgst-sllest)+1)\n          b8m<-sllest\n\n          epx <-array(range)\n          epy <-array(range)\n          c<-1\n          \n          for(i in sllest:bgst){\n            epx[c]<-fl$V17[i] \n            epy[c]<-fl$V18[i] \n            c<-c+1\n          }\n          \n          #Add extra meter\n          ptd <-array(length(fl$V17))\n          ptd[1]<-0\n          td <-array(length(fl$V17))\n          td[1]<-0\n          \n          for(i in 2:length(fl$V17)){\n            ptd[i]<-distance(fl$V17[i], fl$V17[i-1], fl$V18[i], fl$V18[i-1])\n            td[i]<-td[i-1]+ptd[i]\n          }\n          \n          if(td[sllest]>2.3){\n              sindex<-sllest\n              while((td[sllest]-td[sindex]) < 2){\n                    sindex<-sindex-1\n              }\n              b8m<-sindex\n              emeter <-array(sllest-sindex)\n              pxmeter <-array(sllest-sindex)\n              pymeter <-array(sllest-sindex)\n              gap<-0\n              for(i in 1:(sllest-sindex)){\n                emeter[i]<-sindex+gap\n                pxmeter[i]<-fl$V17[(sindex+gap)]\n                pymeter[i]<-fl$V18[(sindex+gap)]\n                gap<-gap+1\n              }\n             epx<-c(pxmeter, epx)\n             epy<-c(pymeter, epy)\n             \n          }\n          \n          #Limit till 8 meters\n          td2<-array(length(epx))\n          b8m1<-b8m\n          \n          lhfx <-array(length(epx))\n          lhfy <-array(length(epx))\n          lhfz <-array(length(epx))\n          rhfx <-array(length(epx))\n          rhfy <-array(length(epx))\n          rhfz <-array(length(epx))\n          lnf <-array(length(epx))\n          rnf <-array(length(epx))\n          tilt <-array(length(epx))\n          roll <-array(length(epx))\n          lhb <-array(length(epx))\n          rhb <-array(length(epx))\n          psi <-array(length(epx))\n          ls <-array(length(epx))\n          rs <-array(length(epx))\n          usrkey<-array(length(epx))\n          fda<-array(length(epx)) #Add distance accumulated of the last segment\n          fda[1]<-0\n          \n          for(i in 1:length(epx)){\n            td2[i]<-td[b8m1]\n            lhfx[i]<-fl$V5[b8m1] \n            lhfy[i]<-fl$V6[b8m1] \n            lhfz[i]<-fl$V7[b8m1] \n            rhfx[i]<-fl$V8[b8m1] \n            rhfy[i]<-fl$V9[b8m1] \n            rhfz[i]<-fl$V10[b8m1] \n            lnf[i]<-fl$V11[b8m1] \n            rnf[i]<-fl$V12[b8m1] \n            tilt[i]<-fl$V13[b8m1] \n            roll[i]<-fl$V14[b8m1] \n            lhb[i]<-fl$V15[b8m1] \n            rhb[i]<-fl$V16[b8m1] \n            psi[i]<-fl$V19[b8m1] \n            ls[i]<-fl$V20[b8m1] \n            rs[i]<-fl$V21[b8m1] \n            usrkey[i]<-sl2\n            b8m1<-b8m1+1\n          }\n          \n          fda2<-0\n          for(i in 2:length(epx)){\n            fda2<-distance(epx[i], epx[i-1], epy[i], epy[i-1])\n            fda[i]<-fda2+fda[i-1]\n          }\n\n          \n          epx<-subset(epx,td2>7.5)\n          epy<-subset(epy,td2>7.5)\n          lhfx<-subset(lhfx,td2>7.5)\n          lhfy<-subset(lhfy,td2>7.5)\n          lhfz<-subset(lhfz,td2>7.5)\n          rhfx<-subset(rhfx,td2>7.5)\n          rhfy<-subset(rhfy,td2>7.5)\n          rhfz<-subset(rhfz,td2>7.5)\n          lnf<-subset(lnf,td2>7.5)\n          rnf<-subset(rnf,td2>7.5)\n          tilt<-subset(tilt,td2>7.5)\n          roll<-subset(roll,td2>7.5)\n          lhb<-subset(lhb,td2>7.5)\n          rhb<-subset(rhb,td2>7.5)\n          psi<-subset(psi,td2>7.5)\n          ls<-subset(ls,td2>7.5)\n          rs<-subset(rs,td2>7.5)\n          usrkey<-subset(usrkey,td2>7.5)\n          fda<-subset(fda,td2>7.5)\n\n      towrite<- data.frame(usrkey,epx,epy,lhfx,lhfy,lhfz,rhfx,rhfy,rhfz,lnf,rnf, tilt, roll, lhb, rhb, psi, ls, rs, fda)\n      tow1<-'/Users/maribelojeda/MIT/I-WALKER/i-walker-Atia/nogales_data_curves/users/curves/'\n      tow2<-paste(tow1, link2, sep = \"\")\n      tow2<-toString(tow2)\n      write.table(towrite, file=tow2, row.names = FALSE,  col.names = FALSE, sep = \",\", append=TRUE)  \n    }\n    \n    \n    #Plot\n    \n    plot(fl$V17,fl$V18, main=sl2, xlab=\"Pos Y \", ylab=\"Pos X \", pch=\".\", cex=.5, col=\"red\")\n    \n    points(fl$V3,fl$V4,col=\"green\", pch=\"-\") \n    points(epx,epy,col=\"blue\", pch=\"-\") \n\n}\n",
    "created" : 1498031322920.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "776883951",
    "id" : "20AB1D9A",
    "lastKnownWriteTime" : 1492967074,
    "last_content_update" : 1492967074,
    "path" : "~/MIT/I-WALKER/i-walker-Atia/curves.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}